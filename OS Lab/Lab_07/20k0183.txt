|------------------------- Question 01 -------------------------| 

#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

void *hello(void *threadid)
{
	long tid;
	tid =(long)threadid;
	//printf("thread %ld\n",tid);
	pthread_exit(NULL);
}


int main()
{
	pthread_t threads[3];
	int rc[3];
	for(long i=0;i<3;i++)
	{
		rc[i] = pthread_create(&threads[i] , NULL ,hello,(void *) i  );
	}
	for(int i=0;i<3;i++)
	{
	if(rc[i])
		{
			printf("Error\n");
			exit(-1);		
		}		
		else
		{
			printf("thread: %d\n",i+1);
		}
	}
	for(int i=0;i<3;i++)
	{
		 if(rc[i]==0)
		{
			printf("thread %d  return 0\n",i+1);
		}

	}
}

|------------------------- Question 02 -------------------------| 

#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>

void *table1()
{
	for(int i=0; i<1000; i++)
	{
		printf("5 x %d = %d\n",i,5*i);
	}
}
void *table2()
{
	for(int i=0; i<1000; i++)
	{
		printf("6 x %d = %d\n",i,6*i);
	}
}
void *table3()
{
	for(int i=0; i<1000; i++)
	{
		printf("7 x %d = %d\n",i,7*i);
	}
}
void *table4()
{
	for(int i=0; i<1000; i++)
	{
		printf("8 x %d = %d\n",i,8*i);
	}
}

int main()
{
pthread_t thread[4];
pthread_create(&thread[0], NULL , table1, NULL);
pthread_create(&thread[1], NULL , table2, NULL);
pthread_create(&thread[2], NULL , table3, NULL);
pthread_create(&thread[3], NULL , table4, NULL);
pthread_join(thread[0],NULL);
pthread_join(thread[1],NULL);
pthread_join(thread[2],NULL);
pthread_join(thread[3],NULL);
}


|------------------------- Question 03 -------------------------| 

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define num 20

pthread_t thread[num];

void *hello(void *threadnum)
{
printf("Hello from thread %u - I was created in iteration %u \n",(int)pthread_self(),(int)threadnum);
pthread_exit(NULL);
}



int main()
{
int n;
printf("Enter Number of threads you want to make: ");
scanf("%d" , &n);

if(n > num)
n = num;

for(int i=0; i< n; i++)
{
	int rc = pthread_create(&thread[i],NULL,hello,(void *)i);

	if(rc)
	{
		printf("Error from pthread_create is :  %d \n",rc);
		exit(1);
	}

	printf("\n I am thread %u. Created new thread (%u) in iteration %d ...\n",(int )pthread_self(), (int)thread_id[i], i);

if( i % 5 == 0)
sleep(1);
}

pthread_exit(NULL);
return 0;
}


|------------------------- Question 04 -------------------------| 

#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <stdlib.h>

typedef struct{
int *arr;
int thread_num;
}data;

int arrsize = 10;


void *halfsum(void *p)
{
data *ptr =(data *)p;
int n = ptr-> thread_num;

int *thread_sum = (int*) calloc(1,sizeof(int));

if(n==0){
for(int i=0; i< arrsize/2 ; i++)
thread_sum[0] = thread_sum[0] + ptr->arr[i];
}
else
{
for(int i= arrsize/2; i< arrsize ; i++)
thread_sum[0] = thread_sum[0] + ptr->arr[i];
}
pthread_exit(thread_sum);
}




int main(void)
{
int *int_arr = (int *) calloc(arrsize,sizeof(int));

for(int i= 0; i < arrsize ; i++)
int_arr[i] = i+ 1;

data thread_data[2];
thread_data[0].thread_num = 0;
thread_data[0].arr = int_arr;
thread_data[1].thread_num = 1;
thread_data[1].arr = int_arr;

pthread_t tid[2];

pthread_create(&tid[0],NULL, halfsum, &thread_data[0]);
pthread_create(&tid[1],NULL, halfsum, &thread_data[1]);

int *sum0;
int *sum1;

pthread_join(tid[0],(void**)&sum0);
pthread_join(tid[1],(void **)&sum1);

printf("Sum of whole array = %i\n", *sum0 + *sum1);

return 0;
}

|------------------------- Question 05 -------------------------| 

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>

void *hello1(void *i)
{
	printf("volunteer1 managing participants %u\n",(int)i);
	pthread_exit(0);
}

void *hello2(void *i)
{
	i = 25+i;
	printf("volunteer2 managing participants %d\n",(int)i);
	pthread_exit(0);
}

void *hello2(void *i)
{

	i = 50+i;
	printf("volunteer3 managing participants %d\n",(int)i);
	pthread_exit(0);
}

void *hello4(void *i)
{

	i = 75+i;
	printf("volunteer4 managing participants %d\n",(int)i);
	pthread_exit(0);
}


int main()
{
pthread_t tid1[25],tid2[25],tid3[25],tid4[25];

for(int i=0;i < 25; i++)
{
pthread_create(&tid1[i],NULL,hello1,(void *)i);
pthread_join(tid1,0);
)

for(int i=0;i < 25; i++)
{
pthread_create(&tid2[i],NULL,hello2,(void *)i);
pthread_join(tid2,0);
)

for(int i=0;i < 25; i++)
{
pthread_create(&tid3[i],NULL,hello3,(void *)i);
pthread_join(tid3,0);
)

for(int i=0;i < 25; i++)
{
pthread_create(&tid4[i],NULL,hello4,(void *)i);
pthread_join(tid4,0);
)

return 0;
}