Q1
-------------------------------------------
#mkdir myprograms
cd myprograms
i=1000
for((j=0;j<10;j++))
do
        fallocate -l $((5*1024*1024)) $j.c
        fallocate -l $((5*1024*1024)) $j.jpg
        fallocate -l $((5*1024*1024)) $j.sh

done


----------------------------
Q2
----------------------------
cd myprograms
for f in *.c;
do 
    echo mv -- "$f" "${f%.txt}.text"$f 
done
-----------------------------
Q3
-----------------------------
find . -name "*.sh" -type f -size +5k

----------------------------
Q4
----------------------------
cd myprograms
for((i=0;$i<1000;((i++))))
do
	mv $i.jpeg ../notmyprograms

done
--------------------------------
Q5
----------------------------------
ls -al
------------------------------
Q6
--------------------------------

cd myprograms
for f in *.c
do
        mv $f "img_$f"
done
----------------------------------
Q7
--------------------------------
cd myexecutebles

for f in *.exe
do
	mv $f /myexecutebles

done

------------------------------------
Q8
------------------------------------
cd jpgdir
for f in *.jpg
do
	mv $f /jpgdir

done

cd shelldir
for f in *.sh
do
	mv $f /shelldir

done

cd cdir
for f in *.c
do
	mv $f /cdir

done



---------------------------------------------
Q9
---------------------------------------------
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <stdlib.h>
int main(){
	int id1=fork();
	if(id1==0){
		sleep(1);
		printf("\nWise Son!\n");
		return 16;
	}
	else{
		wait(NULL);
		printf("\nfirst child has exited\n");
		int id2=fork();
		if(id2==0){
			printf("\nSimple Son!\n");
			execlp("/bin/sh","/bin/sh","-c","cat /sys/class/net/*/address",NULL);
			return 17;
		}
		wait(NULL);
		printf("\nsecond child has exited\n");
		int id3=fork();
		if(id3==0){
			printf("\nWicked Son!\n");
			sleep(7);
			execlp("/bin/sh","/bin/sh","-c","date","date",NULL);
			return 20;
		}
		wait(NULL);
		printf("\nThird child has exited\n");
		int id4=fork();
		if(id4==0){
			printf("\nSon Who Doesn't Know How to Ask Questions!\n");
			printf("Grand parent id:");	
			return 0;	
		}
		wait(NULL);
		printf(" %d",getppid());
		printf("\nFourth child has exited\n");
	}



	return 0;
}






